#!/usr/bin/env python
# -*- coding: CP1252 -*-
#
# generated by wxGlade 0.6.7 (standalone edition) on Wed Nov 13 06:06:05 2013
#
import sys
import string
from dmixel import *
from plot import *
import wx
import matplotlib
matplotlib.use('WXAgg')
from matplotlib.figure import Figure
from matplotlib.backends.backend_wxagg import \
    FigureCanvasWxAgg as FigCanvas, \
    NavigationToolbar2WxAgg as NavigationToolbar  
from matplotlib import pyplot as plt
try:
    from agw import shapedbutton as SB
except ImportError: # if it's not there locally, try the wxPython lib.
    import wx.lib.agw.shapedbutton as SB
import gettext

class MyFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        self.myself = self
        self.myColor = '#CAD4E1'#'#F2F2F2'
        
        # begin wxGlade: MyFrame.__init__
        kwds["style"] = wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.panel_1 = wx.Panel(self, wx.ID_ANY, style=wx.SUNKEN_BORDER | wx.TAB_TRAVERSAL)           

        menubar = wx.MenuBar()
        fileMenu = wx.Menu()
        fitem = fileMenu.Append(-1,'Set_ID')
        self.SetMenuBar(menubar)
        menubar.Append(fileMenu, '&AX_ID')
        
        self.Bind(wx.EVT_MENU, self.set_ID, fitem)
        
        self.panel_2 = wx.Panel(self, wx.ID_ANY, style=wx.SUNKEN_BORDER | wx.TAB_TRAVERSAL)
        self.check_box_1 = wx.CheckBox(self.panel_2, wx.ID_ANY, _("Torque"))
        self.combo_box_2 = wx.ComboBox(self.panel_2, wx.ID_ANY, choices=[_("0    Model Number(L) R-"), 
                            _("1    Model Number(H) R-"), _("2    Version of Firmware R-"), _("3    ID RW"), 
                            _("4    Baud Rate RW"), _("5    Return Delay Time RW"), _("6    CW Angle Limit(L) RW"),
                            _("7    CW Angle Limit(H) RW"), _("8    CCW Angle Limit(L) RW"), 
                            _("9    CCW Angle Limit(H) RW"), _("11    the Highest Limit Temperature RW"), 
                            _("12    the Lowest Limit Voltage RW"), _("13    the Highest Limit Voltage RW"), 
                            _("14    Max Torque(L) RW"), _("15    Max Torque(H) RW"), _("16    Status Return Level RW"), 
                            _("17    Alarm LED RW"), _("18    Alarm Shutdown RW"), _("24    Torque Enable RW"), 
                            _("25    LED RW"), _("26    CW Compliance Margin RW"), _(u"27     CCW Compliance Margin RW"), 
                            _("28    CW Compliance Slope RW"), _("29    CCW Compliance Slope RW"), _("30    Goal Position(L) RW"), 
                            _("31    Goal Position(H) RW"), _("32    Moving Speed(L) RW"), _("33    Moving Speed(H) RW"), 
                            _("34    Torque Limit(L) RW"), _("35    Torque Limit(H) RW"), _("36    Present Position(L) R-"), 
                            _("37    Present Position(H) R-"), _("38    Present Speed(L) R-"), _("39    Present Speed(H) R-"), 
                            _("40    Present Load(L) R-"), _("41    Present Load(H) R-"), _("42    Present Voltage R-"), 
                            _("43    Present Temperature R-"), _("44    Registered R-"), _("46    Moving R-"), _("47    Lock RW"), 
                            _("48    Punch(L) RW"), _("49    Punch(H) RW"), _("50   Control Table R-")], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.spin_ctrl_4 = wx.SpinCtrl(self.panel_2, wx.ID_ANY, "0", min=0, max=1023)
        self.button_3 = SB.SButton(self.panel_2, wx.ID_ANY, _("Write"))
        self.button_2 = SB.SButton(self.panel_2, wx.ID_ANY, _("Read"))
        self.panel_3 = wx.Panel(self, wx.ID_ANY, style=wx.SUNKEN_BORDER | wx.TAB_TRAVERSAL)
        self.label_5 = wx.StaticText(self.panel_3, wx.ID_ANY, _("Equation"))
        self.combo_box_3 = wx.ComboBox(self.panel_3, wx.ID_ANY, choices=[_("sine"), _("triangle"), _("sawtooth"), _("step"), _("ramp")], style=wx.CB_DROPDOWN | wx.CB_READONLY)
        self.label_7 = wx.StaticText(self.panel_3, wx.ID_ANY, _("Period(s)"))
        self.spin_ctrl_6 = wx.SpinCtrl(self.panel_3, wx.ID_ANY, "10", min=0, max=100)
        self.label_6 = wx.StaticText(self.panel_3, wx.ID_ANY, _("Amplitude"))
        self.spin_ctrl_5 = wx.SpinCtrl(self.panel_3, wx.ID_ANY, "500", min=0, max=511)
        self.label_8 = wx.StaticText(self.panel_3, wx.ID_ANY, _("Sample(.001s)"))
        self.spin_ctrl_7 = wx.SpinCtrl(self.panel_3, wx.ID_ANY, "250", min=0, max=500)
        self.button_6 = SB.SButton(self.panel_3, wx.ID_ANY, _("Plot"))
        self.button_7 = SB.SButton(self.panel_3, wx.ID_ANY, _("Start"))
        self.panel_4 = wx.Panel(self, wx.ID_ANY)
        self.text_ctrl_1 = wx.TextCtrl(self.panel_4, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY | wx.TE_RICH2 | wx.TE_LINEWRAP | wx.TE_WORDWRAP)

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_CHECKBOX, self.CB1, self.check_box_1)
        self.Bind(wx.EVT_COMBOBOX, self.cbox2, self.combo_box_2)
        self.Bind(wx.EVT_SPINCTRL, self.spin4, self.spin_ctrl_4)
        self.Bind(wx.EVT_BUTTON, self.btn3, self.button_3)
        self.Bind(wx.EVT_BUTTON, self.btn2, self.button_2)
        self.Bind(wx.EVT_COMBOBOX, self.combo3, self.combo_box_3)
        self.Bind(wx.EVT_SPINCTRL, self.spin6, self.spin_ctrl_6)
        self.Bind(wx.EVT_SPINCTRL, self.spin5, self.spin_ctrl_5)
        self.Bind(wx.EVT_SPINCTRL, self.spin7, self.spin_ctrl_7)
        self.Bind(wx.EVT_BUTTON, self.btn6, self.button_6)
        self.Bind(wx.EVT_BUTTON, self.btn7, self.button_7)
        self.Bind(wx.EVT_TEXT, self.text1, self.text_ctrl_1)
        # end wxGlade
         
        #start matplot
        self.add_matplot()
        self.canvas = FigCanvas(self.panel_1, 0, self.fig)
        self.panel_1.Bind(wx.EVT_SIZE, self.on_size)
        #end of matlpot return to wx
        
        self.period = 10
        self.sample_rate = .25
        self.amplitude = 500
        self.fun = "sine"
        self.spin4_val = 0
        self.combo2_val = 0
        self.AXID = 1
        #self.control_table = read_control_table()
        
        self.redraw_timer = wx.Timer(self)
        self.Bind(wx.EVT_TIMER, self.on_redraw_timer, self.redraw_timer)                

    def __set_properties(self):
        # begin wxGlade: MyFrame.__set_properties
        self.SetTitle(_("Dynamixel AX-12a Tester "))
        self.SetSize((775, 650))
        self.SetBackgroundColour(wx.Colour(192, 192, 192))
        self.check_box_1.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
        self.check_box_1.SetValue(1)
        self.combo_box_2.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
        self.combo_box_2.SetSelection(0)
        self.button_3.SetFont(wx.Font(8, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
        self.button_2.SetFont(wx.Font(8, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
        self.panel_2.SetMinSize((601, 68))
        self.panel_2.SetBackgroundColour(self.myColor)#added by PSW
        self.panel_3.SetBackgroundColour(self.myColor)#added by PSW
        self.panel_4.SetBackgroundColour(self.myColor)#added by PSW
        self.label_5.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
        self.combo_box_3.SetSelection(0)
        self.label_7.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_6.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
        self.label_8.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
        self.button_6.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
        self.button_7.SetFont(wx.Font(10, wx.MODERN, wx.NORMAL, wx.NORMAL, 0, ""))
        #self.button_2.SetLabelColour(wx.BLACK)
        #self.button_2.SetFont(wx.Font(8, wx.SWISS, wx.NORMAL, wx.BOLD, False))
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MyFrame.__do_layout
        sizer_1 = wx.BoxSizer(wx.VERTICAL)
        sizer_5 = wx.BoxSizer(wx.VERTICAL)
        sizer_7 = wx.BoxSizer(wx.HORIZONTAL)
        grid_sizer_3 = wx.FlexGridSizer(2, 4, 1, 1)
        sizer_4 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_6 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(self.panel_1, 6, wx.ALL | wx.EXPAND, 5)
        sizer_6.Add(self.check_box_1, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_6.Add(self.combo_box_2, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_6.Add(self.spin_ctrl_4, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)
        sizer_4.Add(sizer_6, 1, wx.ALL | wx.EXPAND, 0)
        sizer_4.Add(self.button_3, 0, wx.ALL | wx.EXPAND, 5)
        sizer_4.Add(self.button_2, 0, wx.ALL | wx.EXPAND, 5)
        self.panel_2.SetSizer(sizer_4)
        sizer_1.Add(self.panel_2, 1, wx.ALL | wx.EXPAND, 5)
        grid_sizer_3.Add(self.label_5, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_3.Add(self.combo_box_3, 0, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_3.Add(self.label_7, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_3.Add(self.spin_ctrl_6, 0, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_3.Add(self.label_6, 0, wx.ALL | wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_3.Add(self.spin_ctrl_5, 0, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_3.Add(self.label_8, 0, wx.ALL | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_3.Add(self.spin_ctrl_7, 0, wx.ALL | wx.EXPAND | wx.ALIGN_CENTER_HORIZONTAL | wx.ALIGN_CENTER_VERTICAL, 5)
        grid_sizer_3.AddGrowableCol(1)
        grid_sizer_3.AddGrowableCol(3)
        sizer_7.Add(grid_sizer_3, 1, wx.EXPAND, 0)
        sizer_7.Add(self.button_6, 0, wx.ALL | wx.EXPAND, 5)
        sizer_7.Add(self.button_7, 0, wx.ALL | wx.EXPAND, 5)
        self.panel_3.SetSizer(sizer_7)
        sizer_1.Add(self.panel_3, 0, wx.ALL | wx.EXPAND, 5)
        sizer_5.Add(self.text_ctrl_1, 0, wx.ALL | wx.EXPAND, 5)
        self.panel_4.SetSizer(sizer_5)
        sizer_1.Add(self.panel_4, 1, wx.ALL | wx.EXPAND, 5)
        self.SetSizer(sizer_1)
        self.Layout()
        # end wxGlade
    def add_matplot(self):

        self.dpi = 100
        self.fig = Figure( dpi=self.dpi, facecolor=self.myColor)
        
        self.axes = self.fig.add_subplot(111)
        self.add_axes()
        #self.axes.set_axis_bgcolor('black')
    def add_axes(self):
        self.axes.set_title('Amplitude vs Time', size=12)
        #self.axes.set_ylabel('Amplitude', fontsize=12)
        plt.setp(self.axes.get_xticklabels(), fontsize=8)
        plt.setp(self.axes.get_yticklabels(), fontsize=8)
        
        # plot the data as a line series, and save the reference 
        # to the plotted line series
        #
        self.line = self.axes.plot(
            ys, 
            linewidth=1,
            )[0]
            
    def on_redraw_timer(self, event):
        current_time = time.time()-self.starter
        #print current_time
        if current_time > (self.period+1):
            self.redraw_timer.Stop()
            
        self.real_time_plot()
              
    #the eventhandler for the panel. The method resizes the the canvas and the figure.
    def on_size(self, event):
        pix = self.panel_1.GetClientSize()
        self.fig.set_size_inches(pix[0]/self.fig.get_dpi(),
            pix[1]/self.fig.get_dpi())
        x,y = self.panel_1.GetSize()  
        self.canvas.SetSize((x-1, y-1))
        self.canvas.SetSize((x, y))
        self.canvas.draw()
        event.Skip()
        
    def update_plot(self, x, y):
        self.axes.cla()
        self.axes.set_title('Amplitude vs Time', size=12)
        #self.axes.set_ylabel('Amplitude', fontsize=12)
        plt.setp(self.axes.get_xticklabels(), fontsize=8)
        plt.setp(self.axes.get_yticklabels(), fontsize=8)
        self.axes.plot(x,y)
        self.canvas.draw()
        pass
    
    def real_time_plot(self):
        global xs
        global ys
        try:
            xmin = min(xs)
            xmax = max(xs)+5
            ymin = min(ys)-5
            ymax = max(ys)+5
            self.axes.set_xbound(lower=xmax, upper=xmin)
            self.axes.set_ybound(lower=ymin, upper=ymax)       
            #plt.xlim([min(xs),max(xs)+5])
            #plt.ylim([min(ys)-5, max(ys)+5])
            self.line.set_xdata(xs)
            self.line.set_ydata(ys)
            #self.line.set_xdata(xs)
            #self.line.set_ydata(ys)  
            #self.axes.cla()
            #self.axes.plot(xs,ys)
            self.canvas.draw()
        except:
                print "Unexpected error:", sys.exc_info()[0]
                print "there was a problem reading data from dmixel check your connection"
         
    def CB1(self, event):  # wxGlade: MyFrame.<event_handler>
        print (self.check_box_1.GetValue())
        self.text_ctrl_1.Clear()
        if (self.check_box_1.GetValue()):
            setReg(self.AXID,24,[1])
            self.text_ctrl_1.write("Torque enabled")
        else:
            self.check_box_1.SetValue(False)
            setReg(self.AXID,24,[0])
            self.text_ctrl_1.write("Torque released")
        event.Skip()

    def cbox2(self, event):  # wxGlade: MyFrame.<event_handler>
        val = self.combo_box_2.Value
        print "Event handler 'cbox2' = ", val
        val = (val[:2])
        self.combo2_val = int(val)
        event.Skip()

    def spin4(self, event):  # wxGlade: MyFrame.<event_handler>
        self.spin4_val = int(self.spin_ctrl_4.Value)
        print "Event handler 'spin4' =", self.spin4_val
        event.Skip()

    def btn3(self, event):  # wxGlade: MyFrame.<event_handler>
        error = list()
        write_ok = str(self.combo_box_2.Value[-1:])
        if (write_ok == 'W'):
            if (self.combo2_val in  (0, 6, 8, 14, 30, 32, 34, 36, 38, 40, 48)):
                #print "option 1", self.combo2_val
                string = "Really Write " + str(self.spin4_val) +" to " + str(self.combo_box_2.Value[4:-2] + "?")
                answer = self.confirm_write(string)     
                if answer:
                    setReg(self.AXID,self.combo2_val, ((self.spin4_val%256),(self.spin4_val>>8 )))
            else:
                #print "option 2", self.combo2_val
                string = "Really Write " + str(self.spin4_val) +" to " + str(self.combo_box_2.Value[4:-2] + "?")
                answer = self.confirm_write(string)     
                if answer:
                    setReg(self.AXID,self.combo2_val, [(self.spin4_val%256)])
                    for _ in range(0,5,1):
                        error.append(ord(s.read()))
                    if error[4] != 0:
                        self.text_ctrl_1.Clear()
                        self.text_ctrl_1.write("Write error = "+ str(error[4]))
                    elif (error[4] == 0) and (self.combo2_val ==3):
                        self.AXID= self.spin4_val
                        self.text_ctrl_1.Clear()
                        self.text_ctrl_1.write("Set new axis ID to "+ str(self.AXID))
        else:
            string = (str(self.combo_box_2.Value[4:-2]) + " is READ only!")
            self.text_ctrl_1.Clear()
            self.text_ctrl_1.write(string)
                       
        event.Skip()

    def btn2(self, event):  # wxGlade: MyFrame.<event_handler>
        if self.combo2_val == 50:
            control_table = {}
            with open('Control_table.txt', 'r') as f:
                for line in f:
                    splitLine = line.split()
                    control_table[int(splitLine[0])] = ",".join(splitLine[1:])
            
            for key, value in control_table.iteritems():
                get = getReg(self.AXID,key,1)
                self.text_ctrl_1.write( str(key) + " " + str(value) + " : " + str(get[0])+ "\n")
        
        else:
            reg = getReg(self.AXID, self.combo2_val, 1)
            self.text_ctrl_1.Clear()
            self.text_ctrl_1.write(self.combo_box_2.Value[4:-2]+ " = " + str(reg[0]))
        event.Skip()

    def combo3(self, event):  # get function
        print self.combo_box_3.Value
        self.fun = self.combo_box_3.Value
        event.Skip()

    def spin6(self, event):  # wxGlade: MyFrame.<event_handler>
        print self.spin_ctrl_6.Value
        self.period = int(self.spin_ctrl_6.Value)
        event.Skip()

    def spin5(self, event):  # Amplitude
        print self.spin_ctrl_5.Value
        self.amplitude = int(self.spin_ctrl_5.Value)
        event.Skip()

    def spin7(self, event):  # wxGlade: MyFrame.<event_handler>
        global SAMPLEdt
        
        self.sample_rate = int(self.spin_ctrl_7.Value)*.001
        print self.sample_rate, "seconds"
        event.Skip()

    def btn6(self, event):  # GRAPH
        fg = function_generator(self.period, self.amplitude, self.sample_rate, self.fun) 
        x,y = fg.getxy()
        self.update_plot(x,y)
        Pdata, Sdata = read_text_data()
        event.Skip()

    def btn7(self, event):  #START
        #nothing here to stop button pushers
        global s, xs, ys
        del xs[:]
        del ys[:]
        self.axes.cla()
        self.add_axes()
        if (s.isOpen() == False):
            print "error s is not open"
            self.text_ctrl_1.Clear()
            self.text_ctrl_1.write("trying to open serial port...")
            open_port()
            if (s.isOpen() == False):
                self.text_ctrl_1.write("FAILED to open")
                return
            else:
                self.text_ctrl_1.write("Success")

        mymixel = dmixel(self.sample_rate, self.AXID) #probably should get the threads and check and see if they are closed 
              
        self.starter = time.time()
        self.redraw_timer.Start(100)
        event.Skip()

    def text1(self, event):  # wxGlade: MyFrame.<event_handler>
        event.Skip()
        
    def confirm_write(self, message=None):
        result = 0
        dlg = wx.MessageDialog(None, message,'Warning!',
            wx.YES_NO | wx.ICON_QUESTION)
        retCode = dlg.ShowModal()
        if (retCode == wx.ID_YES):
            result = 1          
        dlg.Destroy()
        return result
    
    def set_ID(self, event=None):
        #dlg = wx.MessageDialog(None, "Choose your motor ID", wx.OK | wx.ICON_QUESTION)
        dlg = wx.TextEntryDialog(
                self, 'Enter the ID number of the motor you want to write to', 'Set ID')

        dlg.SetValue(str(self.AXID ))

        if dlg.ShowModal() == wx.ID_OK:
            if dlg.GetValue().isdigit():
                self.text_ctrl_1.Clear()
                self.text_ctrl_1.write('You entered: %s\n' % dlg.GetValue())
                self.AXID = int(dlg.GetValue())
            else:
                self.text_ctrl_1.Clear()
                self.text_ctrl_1.write('You must enter a integer! are you sure you know what your doing?')
                self.set_ID()
        dlg.Destroy()


# end of class MyFrame
if __name__ == "__main__":
    gettext.install("app") # replace with the appropriate catalog name
   
    app = wx.PySimpleApp(0)
    wx.InitAllImageHandlers()
    frame_1 = MyFrame(None, wx.ID_ANY, "")
    app.SetTopWindow(frame_1)
    frame_1.Show()
    
    app.MainLoop()